  #include <bits/stdc++.h>
  using namespace std;


  int bisect_left(const vector<int>& sorted_vec, int key) {
     size_t mid, left = 0 ;
     size_t right = sorted_vec.size(); // one position passed the right end
     if(sorted_vec.size()==0)
      return 0;
     while (left < right) {
        mid = int((left + right)/2);
        if(sorted_vec[mid] < key){
          left = mid + 1;
        }
        else{
          right = mid;
        }
      }
     return left;      
  }


  int main() {
    int tc;
    cin >> tc;
    while(tc--)
    {
      int n,i,j,m;
      double k;
      cin >> n >> k;
      vector<int> arr;
      // Array input from user
      for(i=0; i<n; i++)
      {
        int input;
        cin >> input;
        arr.push_back(input);
      }
      cout << bisect_left(arr,5)<<endl;
      // Core //
      int counter = 0;
      for(i=0; i<n; i++)
      {
        // New vector sub to increasingly store every element
        // This is always in sorted order
        vector<int> sub;
        // Frequency counter for each subarray
        int *freq = new int[2001];
        
        for(j=i; j<n; j++)
        {
          m = ceil(k/((j-i)+1)); //Multiplier
          
          int item = arr.at(j); // New element for THIS subarray
          freq[item] += 1; //Counting it in

          int pos = bisect_left(sub, item); //log n
          sub.insert(sub.begin()+pos, item); // LOL xD

          int temp = ceil(k/m);
          int X = sub.at(temp-1);
          int F = freq[X];
          
          int flag = freq[F];
          
          if(flag>0)
            counter++;
        }
      }
      cout << counter << "\n";
    }
    return 0;
  }
