from itertools import *

def f(r, c):
    if max(r, c) <= 3 or (min(r, c), max(r, c)) in {(2, 4)}: return
    if r > c: return [(i, j) for j, i in f(c, r)]
    def subok(t, d):
        fset = set()
        fs = []
        sj = 0
        for it in range(c):
            j = sj
            sj = (sj + t) % c
            for i in range(r):
                if (i, j) in fset: return False
                if fs:
                    pi, pj = fs[-1]
                    if i == pi or j == pj or i + j == pi + pj or i - j == pi - pj:
                        return
                fs.append((i, j))
                fset.add((i, j))
                j = (j + d) % c
        assert len(fs) == len(fset) == r * c
        return fs

    for t in range(c):
        for d in range(c+1):
            res = subok(t, d)
            if res: return res

for cas in range(1,1+int(input())):
    r, c = map(int, input().split())
    res = f(r, c)
    print("Case #{}: {}".format(cas, 'POSSIBLE' if res else 'IMPOSSIBLE'))
    if res:
        for i, j in res:
            print(i+1, j+1)
